import unittest
from unittest.mock import Mock, patch
from your_module_name import (
    is_grafana_ready,
    does_datasource_exist,
    create_datasource,
    update_datasource,
    get_datasource_id,
)

class TestYourCode(unittest.TestCase):

    @patch('requests.get')
    def test_is_grafana_ready_success(self, mock_get):
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"database": "ok"}
        mock_get.return_value = mock_response

        self.assertTrue(is_grafana_ready("http://fake_grafana_url"))

    @patch('requests.get')
    def test_is_grafana_ready_failure(self, mock_get):
        mock_response = Mock()
        mock_response.status_code = 500  # Simulate failure
        mock_get.return_value = mock_response

        self.assertFalse(is_grafana_ready("http://fake_grafana_url"))

    @patch('requests.get')
    def test_does_datasource_exist_existing(self, mock_get):
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = [{"name": "prom17"}, {"name": "MySQL"}]
        mock_get.return_value = mock_response

        self.assertTrue(does_datasource_exist("http://fake_grafana_url", "fake_api_key", "prom17"))

    @patch('requests.get')
    def test_does_datasource_exist_not_existing(self, mock_get):
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = [{"name": "prom17"}, {"name": "MySQL"}]
        mock_get.return_value = mock_response

        self.assertFalse(does_datasource_exist("http://fake_grafana_url", "fake_api_key", "nonexistent"))

    @patch('requests.post')
    def test_create_datasource_success(self, mock_post):
        mock_response = Mock()
        mock_response.status_code = 200
        mock_post.return_value = mock_response

        datasource_info = {"name": "TestDataSource"}
        self.assertTrue(create_datasource("http://fake_grafana_url", "fake_api_key", datasource_info))

    @patch('requests.put')
    def test_update_datasource_success(self, mock_put):
        mock_response = Mock()
        mock_response.status_code = 200
        mock_put.return_value = mock_response

        datasource_info = {"name": "TestDataSource"}
        self.assertTrue(update_datasource("http://fake_grafana_url", "fake_api_key", "12345", datasource_info))

    @patch('requests.get')
    def test_get_datasource_id_existing(self, mock_get):
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = [{"name": "prom17", "id": "12345"}, {"name": "MySQL", "id": "67890"}]
        mock_get.return_value = mock_response

        self.assertEqual(get_datasource_id("http://fake_grafana_url", "fake_api_key", "prom17"), "12345")

    @patch('requests.get')
    def test_get_datasource_id_not_existing(self, mock_get):
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = [{"name": "prom17", "id": "12345"}, {"name": "MySQL", "id": "67890"}]
        mock_get.return_value = mock_response

        self.assertIsNone(get_datasource_id("http://fake_grafana_url", "fake_api_key", "nonexistent"))

if __name__ == '__main__':
    unittest.main()
