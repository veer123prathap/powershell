def calculate_next_run(next_run_datetime: datetime = None) -> float:
    """
    Calculate the next run time for cron job.

    Parameters
    ----------
    next_run_datetime: datetime
        Next run time for cron job.

    Returns
    -------
    float
        Total seconds untill next run.

    """
    global next_run_time_string
    # Current time is 12:00 PM CST
    current_time = time.time()
    current_datetime = datetime.datetime.utcfromtimestamp(current_time)
    cst_timezone = pytz.timezone('US/Central')
    current_datetime_cst = current_datetime.astimezone.replace(tzinfo=pytz.utc).astimezone(cst)

    next_run_datetime = current_datetime_cst.replace(hour=5, minute=0, second=0)
    next_run_time = next_run_datetime.time()
    current_datetime_cst_time = current_datetime_cst.time()
    if current_datetime_cst_time >= next_run_time:
         next_run_datetime += datetime.timedelta(days=1)
    time_untill_next_run = (next_run_datetime - current_datetime_cst).total_seconds()
    next_run_time_string = next_run_datetime.isoformat()
    return time_untill_next_run

def get_credentials() -> dict:
    """
    Get the credentials from conjur.

    Returns
    -------
    dict
        Credentials.

    """
    global sql_user
    global sql_password
    paths = ['veera/test']
    creds = {}
    for path in paths:
        cred = envext.get_conjur_secret(path)
        if cred.username is not None  or cred.password is not None:
            if path == 'test':
                sql_user = cred.username
                sql_password = cred.password
            else:
            
            creds[path] = cred
    return creds

def is_grafana_ready(grafana_url: str) -> bool:
    """
    Check whether the grafana is ready or not.

    Parameters
    ----------
    grafana_url: str
        Grafana url.

    Returns
    -------
    bool
        True if grafana is ready.

    """
    try:
        response = requests.get(f"{grafana_url}/api/health")
        return response.status_code == 200 and response.json().get("database") == "ok"
    except requests.exceptions.RequestException:
        return False

def does_datasource_exist(grafana_url: str, api_key: str, datasource_name: str) -> bool:
    """
    Check whether the datasource exist or not.

    Parameters
    ----------
    grafana_url: str
        Grafana url
    api_key: str
        Grafana api key
    datasource_name: str
        Datasource name

    Returns
    -------
    bool
        True if datasource exist.

    """
    headers = {"Authorization": f"Bearer {api_key}"}
    response = requests.get(f"{grafana_url}/api/datasources", headers=headers)
    if response.status_code == 200:
        datasources = response.json()
        for datasource in datasources:
            if datasource.get("name") == datasource_name:
                return True
    return False

def create_datasource(grafana_url: str, api_key: str, datasource_info: dict) -> bool:
    """
    Create the datasource.

    Parameters
    ----------
    grafana_url: str
        Grafana url
    api_key: str
        Grafana api key
    datasource_info: dict
        Datasource info

    Returns
    -------
    bool
        True if datasource is created.

    """
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    response = requests.post(f"{grafana_url}/api/datasources", headers=headers, data=json.dumps(datasource_info))
    return response.status_code == 200

def update_datasource(grafana_url: str, api_key: str, datasource_id: str, datasource_info: dict) -> bool:
    """
    Update the datasource.

    Parameters
    ----------
    grafana_url: str
        Grafana url
    api_key: str
        Grafana api key
    datasource_id: str
        Datasource id
    datasource_info: dict
        Datasource info

    Returns
    -------
    bool
        True if datasource is updated.

    """
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    response = requests.put(f"{grafana_url}/api/datasources/{datasource_id}", headers=headers, data=json.dumps(datasource_info))
    return response.status_code == 200

def get_datasource_id(grafana_url: str, api_key: str, datasource_name: str) -> str:
    """
    Get datasource id.

    Parameters
    ----------
    grafana_url: str
        Grafana url
    api_key: str
        Grafana api key
    datasource_name: str
        Datasource name

    Returns
    -------
    str
        Datasource id.

    """
    headers = {"Authorization": f"Bearer {api_key}"}
    response = requests.get(f"{grafana_url}/api/datasources", headers=headers)
    if response.status_code == 200:
        datasources = response.json()
        for datasource in datasources:
            if datasource.get("name") == datasource_name:
                return datasource.get("id")
    return None
